name: Checks

on: [push, pull_request]

jobs:
  Unix:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            Format_Profile: Shared object / AMD x86-64
          - os: ubuntu-24.04-arm
            Format_Profile: Shared object / ARM64
          - os: macos-latest
            Format_Profile: Demand paged executable / ARM64
      fail-fast: false
    name: Unix (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Dependencies
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get update -y
            sudo apt-get install -y libbrotli-dev zlib1g-dev libwxgtk3.2-dev
          fi
          if [ "$RUNNER_OS" == "macOS" ]; then
            brew install libtool automake wxmac
          fi
      - name: ZenLib
        run: |
          git -C .. clone --depth=1 https://github.com/MediaArea/ZenLib.git
          pushd ../ZenLib/Project/GNU/Library
            autoreconf -if
            ./configure --enable-static
            make -j4
          popd
      - name: MediaInfoLib
        run: |
          git -C .. clone --depth=1 https://github.com/MediaArea/MediaInfoLib.git
          pushd ../MediaInfoLib/Project/GNU/Library
            autoreconf -if
            ./configure --enable-static
            make -j4
          popd
      - name: Configure CLI
        run: |
          cd Project/GNU/CLI
          autoreconf -if
          ./configure --enable-staticlibs
      - name: Build CLI
        run: |
          cd Project/GNU/CLI
          make -j4
      - name: Test CLI
        env:
          DYLD_LIBRARY_PATH: ${{ github.workspace }}/../ZenLib/Project/GNU/Library/.libs:${{ github.workspace }}/../MediaInfoLib/Project/GNU/Library/.libs
        run : |
          cd Project/GNU/CLI/.libs
          expected_output="${{ matrix.Format_Profile }}"
          actual_output=$(./mediainfo "--Output=General;%Format_Profile%" mediainfo)
          echo "Expected: '$expected_output'"
          echo "Actual:   '$actual_output'"
          if [ "$actual_output" = "$expected_output" ]; then
            exit 0
          else
            echo "::error::Test CLI: MediaInfo CLI output ($actual_output) is not as expected ($expected_output)"
            exit 1
          fi
      - name: Configure GUI
        run: |
          cd Project/GNU/GUI
          autoreconf -if
          ./configure --enable-staticlibs
      - name: Build GUI
        run: |
          cd Project/GNU/GUI
          make -j4

  Windows:
    strategy:
      matrix:
        include:
          - architecture: Win32
            runner: windows-latest
            Format_Profile: Executable / Intel i386
          - architecture: x64
            runner: windows-latest
            Format_Profile: Executable / AMD x86-64
          - architecture: ARM64
            runner: windows-11-arm
            Format_Profile: Executable / ARM64
      fail-fast: false
    name: Windows (${{ matrix.architecture }})
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout brotli
        uses: actions/checkout@v5
        with:
          repository: MediaArea/brotli
          path: brotli
      - name: Checkout zlib
        uses: actions/checkout@v5
        with:
          repository: MediaArea/zlib
          path: zlib
      - name: Checkout ZenLib
        uses: actions/checkout@v5
        with:
          repository: MediaArea/ZenLib
          path: ZenLib
      - name: Checkout MediaInfoLib
        uses: actions/checkout@v5
        with:
          repository: MediaArea/MediaInfoLib
          path: MediaInfoLib
      - name: Checkout MediaArea-Utils for MediaInfo_NoGUI patch
        uses: actions/checkout@v5
        with:
          repository: MediaArea/MediaArea-Utils
          path: MediaArea-Utils
          sparse-checkout: build_release/Diff/MediaInfo_NoGUI.diff
          sparse-checkout-cone-mode: false
      - name: Checkout MediaInfo
        uses: actions/checkout@v5
        with:
          path: MediaInfo
      - name: Apply MediaInfo_NoGUI patch
        run: cd ${{ github.workspace }}\MediaInfo && git apply ${{ github.workspace }}\MediaArea-Utils\build_release\Diff\MediaInfo_NoGUI.diff
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: ${{ runner.arch == 'ARM64' && 'arm64' || 'x64' }}
      - name: Build
        run: msbuild -restore -p:RestorePackagesConfig=true -p:Configuration=Release -p:Platform=${{ matrix.architecture }} ${{ github.workspace }}\MediaInfo\Project\MSVC2022\MediaInfo.sln -verbosity:quiet -warnaserror
      - name: Test CLI
        run : |
          cd ${{ github.workspace }}\MediaInfo\Project\MSVC2022\${{ matrix.architecture }}\Release
          $expected_output = "${{ matrix.Format_Profile }}"
          $actual_output = & ".\MediaInfo.exe" "--Output=General;%Format_Profile%" "MediaInfo.exe"
          Write-Host "Expected: '$expected_output'"
          Write-Host "Actual:   '$actual_output'"
          if ($actual_output -ceq $expected_output) {
            exit 0
          } else {
            Write-Host "::error::Test CLI: MediaInfo CLI output ($actual_output) is not as expected ($expected_output)"
            exit 1
          }

  CMake:
    strategy:
      matrix:
        include:
          - type: Windows (x64)
            runner: windows-latest
            Format_Profile: Executable / AMD x86-64
            CXXFLAGS: "/std:c++20 /WX"
          - type: Windows (DLL) (x64)
            runner: windows-latest
            Format_Profile: Executable / AMD x86-64
            CXXFLAGS: "/std:c++20 /WX"
          - type: Windows (ARM64)
            runner: windows-11-arm
            Format_Profile: Executable / ARM64
            CXXFLAGS: "/std:c++20 /WX"
          - type: Ubuntu (AMD64)
            runner: ubuntu-latest
            Format_Profile: Shared object / AMD x86-64
            CXXFLAGS: "-Werror -Wno-error=deprecated-declarations"
          - type: Ubuntu (ARM64)
            runner: ubuntu-24.04-arm
            Format_Profile: Shared object / ARM64
            CXXFLAGS: "-Werror -Wno-error=deprecated-declarations"
      fail-fast: false
    name: CMake ${{ matrix.type }}
    runs-on: ${{ matrix.runner }}
    env:
      CXXFLAGS: ${{ matrix.CXXFLAGS }}
    steps:
      - name: Checkout brotli
        uses: actions/checkout@v5
        with:
          repository: MediaArea/brotli
          path: brotli
      - name: Checkout zlib
        uses: actions/checkout@v5
        with:
          repository: MediaArea/zlib
          path: zlib
      - name: Checkout ZenLib
        uses: actions/checkout@v5
        with:
          repository: MediaArea/ZenLib
          path: ZenLib
      - name: Checkout MediaInfoLib
        uses: actions/checkout@v5
        with:
          repository: MediaArea/MediaInfoLib
          path: MediaInfoLib
      - name: Checkout MediaInfo
        uses: actions/checkout@v5
        with:
          path: MediaInfo
      - name: Setup MSVC Developer Command Prompt
        if: ${{ runner.os == 'Windows' }}
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ runner.arch == 'ARM64' && 'arm64' || 'x64' }}
      - name: Build dependencies
        if: ${{ matrix.type == 'Windows (DLL) (x64)' }}
        run: |
          cmake -G Ninja -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=./cmake-prefix/ -B build-brotli ./brotli/
          cmake --build build-brotli
          cmake --install build-brotli
          cmake -G Ninja -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=./cmake-prefix/ -B build-zlib ./zlib/
          cmake --build build-zlib
          cmake --install build-zlib
          cmake -G Ninja -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=./cmake-prefix/ -B build-zenlib ./ZenLib/Project/CMake/
          cmake --build build-zenlib
          cmake --install build-zenlib
          cmake -G Ninja -D CMAKE_BUILD_TYPE=Release -D CMAKE_PREFIX_PATH=./cmake-prefix/ -D CMAKE_INSTALL_PREFIX=./cmake-prefix/ -D BUILD_BROTLI=OFF -D BUILD_ZLIB=OFF -D BUILD_ZENLIB=OFF -D BUILD_SHARED_LIBS=ON -B build-mediainfolib ./MediaInfoLib/Project/CMake/
          cmake --build build-mediainfolib
          cmake --install build-mediainfolib
      - name: Configure CLI
        run: cmake -G Ninja -D CMAKE_PREFIX_PATH=./cmake-prefix/ -D CMAKE_INSTALL_PREFIX=./cmake-prefix/ -D CMAKE_BUILD_TYPE=Release -D ZLIB_BUILD_TESTING=OFF ${{ matrix.type == 'Windows (DLL) (x64)' && '-D MEDIAINFO_CLI_STATIC=OFF' || '-D BUILD_BROTLI=ON -D BUILD_ZENLIB=ON -D BUILD_ZLIB=ON' }} -B build ./MediaInfo/Project/CMake/CLI/
      - name: Build CLI
        run: cmake --build build 
      - name: Install CLI
        run: cmake --install build
      - name: Test CLI
        shell: bash
        run : |
          cd cmake-prefix/bin
          expected_output="${{ matrix.Format_Profile }}"
          actual_output=$(./mediainfo "--Output=General;%Format_Profile%" ${{ runner.os == 'Windows' && 'MediaInfo.exe' || 'mediainfo' }})
          echo "Expected: '$expected_output'"
          echo "Actual:   '$actual_output'"
          if [ "$actual_output" = "$expected_output" ]; then
            exit 0
          else
            echo "::error::Test CLI: MediaInfo CLI output ($actual_output) is not as expected ($expected_output)"
            exit 1
          fi
