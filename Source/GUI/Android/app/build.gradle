apply plugin: 'com.android.application'
apply plugin: 'com.google.devtools.ksp'
apply plugin: 'kotlin-android'

import groovy.xml.XmlParser
import groovy.xml.XmlUtil

android {
    buildFeatures {
        viewBinding true
    }
    compileSdk 36
    namespace "net.mediaarea.mediainfo"
    defaultConfig {
        applicationId "net.mediaarea.mediainfo"
        multiDexEnabled true
        minSdkVersion 21
        versionCode 50
        versionName "25.07"
        targetSdkVersion 36
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
        externalNativeBuild {
            cmake {
                cppFlags "-DUNICODE -D_UNICODE -DMEDIAINFO_ADVANCED_NO -DMEDIAINFO_REFERENCES_NO -DMEDIAINFO_FILTER_NO -DMEDIAINFO_DUPLICATE_NO -DMEDIAINFO_MACROBLOCKS_NO -DMEDIAINFO_TRACE_NO -DMEDIAINFO_TRACE_FFV1CONTENT_NO -DMEDIAINFO_IBI_NO -DMEDIAINFO_DIRECTORY_NO -DMEDIAINFO_LIBCURL_NO -DMEDIAINFO_LIBMMS_NO -DMEDIAINFO_DVDIF_ANALYZE_NO -DMEDIAINFO_MPEGTS_DUPLICATE_NO -DMEDIAINFO_READTHREAD_NO -DMEDIAINFO_MD5_NO -DMEDIAINFO_SHA1_NO -DMEDIAINFO_SHA2_NO -DMEDIAINFO_EVENTS_NO -DMEDIAINFO_DEMUX_NO -DMEDIAINFO_AES_NO -DMEDIAINFO_FIXITY_NO -DMEDIAINFO_READER_NO -DMEDIAINFO_NEXTPACKET_NO"
                arguments "-DANDROID_SUPPORT_FLEXIBLE_PAGE_SIZES=ON"
            }
        }
        splits {
            abi {
                reset()
                include 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            }
        }
        if(project.hasProperty("RELEASE_STORE_FILE")) {
            signingConfigs {
                release {
                    storeFile file(RELEASE_STORE_FILE)
                    storePassword RELEASE_STORE_PASSWORD
                    keyAlias RELEASE_KEY_ALIAS
                    keyPassword RELEASE_KEY_PASSWORD
                }
            }
        }
    }
    buildTypes {
        release {
            if(project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    splits {
        abi {
            def isBuildingBundle = gradle.startParameter.taskNames.any { it.toLowerCase().contains('bundle') }
            enable !isBuildingBundle

            universalApk true
        }
    }
    bundle {
        language {
            enableSplit false
        }
    }
    compileOptions {
        targetCompatibility JavaVersion.VERSION_21
        sourceCompatibility JavaVersion.VERSION_21
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_21
    }
    def abiCodes = ['armeabi-v7a':1, 'arm64-v8a':2, 'x86':3, 'x86_64':4]
    android.applicationVariants.configureEach { variant ->
        // Assigns a different version code for each output APK.
        variant.outputs.each {
            output ->
                def abiName = output.getFilter('ABI')
                output.versionCodeOverride = variant.versionCode * 10 + abiCodes.get(abiName, 0)
        }
    }
}

tasks.register('copyLocales', DefaultTask) {
    def locales = [:]

    fileTree("../../../../Source/Resource/Plugin/Language").visit { FileVisitDetails details ->
        def locale = details.file.name.replace(".csv", "").replace("-", "-r")
        if (locale == "gr") {
            locale = "el"
        }

        // copy localized csv into raw resources
        def raw = "src/main/res/raw-" + locale

        if (details.file.name == "en.csv") {
            raw = "src/main/res/raw"
        }

        mkdir raw
        copy {
            from details.file
            into raw
            rename { "lang.csv" }
        }

        //  update translations xml
        def csv = [:]
        file(details.file).splitEachLine(";") {
            if(it.size()==2 && it[0].size() && it[1].size()) {
                csv[it[0]] = it[1]
            }
        }
        def xml = new XmlParser().parse(file("src/main/res/values/strings.xml"))
        xml.string.each {
            if (it.@translatable == "false" || it.@csv == null || !csv.containsKey(it.@csv)) {
                xml.remove(it)
            }
            else {
                it.value = csv[it.@csv].replaceAll("\\\\r", "").replaceAll("'", "\\\\'").replaceAll("\"", "\\\\\"")
            }
        }

        if (xml.children().size()) {
            def values = "src/main/res/values-" + locale
            mkdir values

            def writer = file(values + "/strings.xml").newPrintWriter("UTF-8") // PrintWriter truncates file before write
            new XmlUtil().serialize(xml, writer)
            writer.close()
            //add locale to list
            locales[csv["  Language_Name"]] = locale
        }
    }

    // update translations list
    def xml = new XmlParser().parse(file("src/main/res/values/arrays.xml"))
    def locales_array = xml.find { it."@name" == "locales" }
    def locales_values_array = xml.find { it."@name" == "locales_values" }

    locales_array.item.each {
        if (locales_array.children().indexOf(it) > 0) {
            locales_array.remove(it)
        }
    }

    locales_values_array.item.each {
        if (locales_values_array.children().indexOf(it) > 0) {
            locales_values_array.remove(it)
        }
    }

    locales.sort().each { lang ->
        def name = new NodeBuilder().item(lang.key)
        locales_array.append(name)

        def value = new NodeBuilder().item(lang.value)
        locales_values_array.append(value)
    }

    def writer = file("src/main/res/values/arrays.xml").newPrintWriter("UTF-8") // PrintWriter truncates file before write
    new XmlUtil().serialize(xml, writer)
    writer.close()
}

preBuild.dependsOn copyLocales

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.7.1'
    implementation 'androidx.preference:preference-ktx:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.4.0'
    implementation 'com.android.support:design:34.2.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.7.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.7.0'
    // Android Room
    implementation 'androidx.room:room-runtime:2.7.2'
    implementation 'androidx.room:room-rxjava2:2.7.2'
    ksp 'androidx.room:room-compiler:2.7.2'
    //RxJava
    implementation 'io.reactivex.rxjava2:rxjava:2.2.21'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    // Android Lifecycle
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    ksp "androidx.lifecycle:lifecycle-common-java8:2.9.2"
    // Google Billing
    implementation "com.android.billingclient:billing:8.0.0"
    implementation "com.android.billingclient:billing-ktx:8.0.0"
    // KotlinX Coroutines
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.2"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.10.2"
    // Locales manager
    implementation 'com.github.YarikSOffice:lingver:1.3.0'
}
